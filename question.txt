-------------------------------------------------------------------------------

1. Instructions

- replace any [...] with free text,
  and
- replace the [?] with an X if you have completed that stage,
- replace the [?] with an * if you have attempted that stage, but you know
  it doesn't work completely; document why you think it doesn't work, plus
  what you would do to fix the problem, at the end of the marksheet.

-------------------------------------------------------------------------------

2. Information

So that we can calibrate and improve the assignment in the future, give us
a rough idea how long (in hours) you spent on it *in total*:

effort : [40] hours

-------------------------------------------------------------------------------

3. Citation

Clearly it might have an influence on your mark, but the use of third-party
resources is allowed *iff.* it

- hasn't been explicitly prohibited by the assignment description, *and*
- is correctly cited.

Let us know any third-party source code or resources you used (if any) so
it's clear what's your work and what isn't:

Font taken from https://github.com/dhepper/font8x8/blob/master/font8x8_basic.h in font.h

-------------------------------------------------------------------------------

4. Marking

The following gives a stage-by-stage description of the assignment marking
scheme.  Note this acts as an indicative guideline only, including weights
for each more obvious aspect (e.g., functional correctness); other aspects
outside this list can warrant an increase/decrease in marks, with examples
including hard to quantify features such as style, efficiency, robustness, 
generality, or realism of a solution.  Put another way, identifying then
reasoning about these latter aspects forms part of the assessment, so they
are not (necessarily) detailed explicitly.

    Stage 1 : a baseline kernel
[X]           - pre-emptive multi-tasking                            ( 30%)
[X]           - priority-based scheduler                             ( 10%)

    Stage 2 : closed generalisations and enhancements
[X]           - fork, exec, and exit system calls                    ( 15%)
[X]           - Inter-Process Communication (IPC)                    ( 15%)

    Stage 3 : open   generalisations and enhancements                ( 30%)
[?]           - MMU-based protection and virtualisation
                *OR*
[X]           - LCD screen and PS/2 device drivers and GUI
                *OR*
[?]           - file system based on simplified, emulated disk
                *OR*
[?]           - kernel port to real, physical hardware                     

                                                                     ------
                                                                     (100%)

-------------------------------------------------------------------------------

5. Documentation

Any other documentation, notes or comments that you think are important or
might be easy to overlook (e.g., a subtle issue or technique in associated
source code) should go here:

[

Stage 1.
Used Scheduler to check processes on queue and run next process after each tick 
(timer interupt). Then added priority to process queue. I chose to add priority
to the queue it self, but in the future would probably add the priority to the
process as it could be accessed more easily.

Before taking anything off queue, it peeks the prioity of the next process. The 
queue is stored in prioity order so this is the process with highest (lower integer
value) prioity. If this prioity is lower than the current running process, it 
continues to run the current process and takes nothing off the queue.

Used void* linked list, so it could be used as base for process queue and for 
the prococess table.

Stage 2.

The process table was changed to a linked list so item could be added and removed
more easily. 

Implemented fork and exec - Splits the current process into child and parent. In 
execute we then change the program counter to point at a new progrom. This allows 
the creation of a new process.

Philosiphers - Used a waiter to ensure only one philosipher could pick up cutlery
at one time. This prevents deadlock as it always allows a philosipher to pick up
2 pieces of cutlery whilst preventing all other philosipher from picking up 
anything.

UI Stage 3:

Aim: My aim was to implement clickable buttons

Draw() - I added the draw function to ensure the frame buffer would only update 
when required by the user programs, opposed to having to update every timer
interupt

Mouse Clicks - I handled mouse clicks in the user program. Alhtough this is not
the optimal solution (the interupt is not handled at the same time as the PS/2
interupt), with a sufficienlty fast timer, it works fine.

Hover - I handled hover in the user program and then used a pointer to a global
hilevel variable to state whether the mouse was hovering. I used a uint_8 rather
than a bool so that programs could specify different hover hover behaviours,
although I only implemented 1 (chaning color). With more time I would add a 
second drawMousePointer function to allow the mouse pointer to be different 
when hovering over clickable (this could be extended to add additonal mouse 
pointers for differnt hovers eg text).

Graphics - I wrote a basic graphics library to draw button, squares and print text.
Text was draw using an 8x8 font I found online and then putting pixels where the 
font array specified. This only supports basic asci but could easily be extended
with a greater font array. Put string simply puts characters until the string
terminate character '\0'. This graphics libraray could be extended to include more
compontents. I would also like to add seperate draw functions for different shapes
to prevent the whole screen from being redrawn. This would hover require a svc
interupt which takes the region that is being updtaed.

Execute and Terminate button - The execute button forks the P6 process. The child 
then executes the process associated with the button. The parent process sets the 
global pid value to that of the child process. This then allows the terminate process 
button to know which pid to terminate to termiante P3. It also prints this pid on 
the screen to show the user which pid the button will terminate.

]

-------------------------------------------------------------------------------
