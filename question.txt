-------------------------------------------------------------------------------

1. Instructions

- replace any [...] with free text,
  and
- replace the [?] with an X if you have completed that stage,
- replace the [?] with an * if you have attempted that stage, but you know
  it doesn't work completely; document why you think it doesn't work, plus
  what you would do to fix the problem, at the end of the marksheet.

-------------------------------------------------------------------------------

2. Information

So that we can calibrate and improve the assignment in the future, give us
a rough idea how long (in hours) you spent on it *in total*:

effort : [40] hours

-------------------------------------------------------------------------------

3. Citation

Clearly it might have an influence on your mark, but the use of third-party
resources is allowed *iff.* it

- hasn't been explicitly prohibited by the assignment description, *and*
- is correctly cited.

Let us know any third-party source code or resources you used (if any) so
it's clear what's your work and what isn't:

Font taken from https://github.com/dhepper/font8x8/blob/master/font8x8_basic.h in font.h

-------------------------------------------------------------------------------

4. Marking

The following gives a stage-by-stage description of the assignment marking
scheme.  Note this acts as an indicative guideline only, including weights
for each more obvious aspect (e.g., functional correctness); other aspects
outside this list can warrant an increase/decrease in marks, with examples
including hard to quantify features such as style, efficiency, robustness, 
generality, or realism of a solution.  Put another way, identifying then
reasoning about these latter aspects forms part of the assessment, so they
are not (necessarily) detailed explicitly.

    Stage 1 : a baseline kernel
[X]           - pre-emptive multi-tasking                            ( 30%)
[X]           - priority-based scheduler                             ( 10%)

    Stage 2 : closed generalisations and enhancements
[X]           - fork, exec, and exit system calls                    ( 15%)
[X]           - Inter-Process Communication (IPC)                    ( 15%)

    Stage 3 : open   generalisations and enhancements                ( 30%)
[?]           - MMU-based protection and virtualisation
                *OR*
[X]           - LCD screen and PS/2 device drivers and GUI
                *OR*
[?]           - file system based on simplified, emulated disk
                *OR*
[?]           - kernel port to real, physical hardware                     

                                                                     ------
                                                                     (100%)

-------------------------------------------------------------------------------

5. Documentation

Any other documentation, notes or comments that you think are important or
might be easy to overlook (e.g., a subtle issue or technique in associated
source code) should go here:

[




UI:
Draw() - I added the draw function to ensure the frame buffer would only update 
when required by the user programs, opposed to having to update every timer
interupt

Mouse Clicks - I handled mouse clicks in the user program. Alhtough this is not
the optimal solution (the interupt is not handled at the same time as the PS/2
interupt), with a sufficienlty fast timer, it works fine.

Philosiphers - Used a waiter to ensure only one philosipher could pick up cutlery
at one time.

Used void* linked list, so it could be used as base for both process queue and 
prococess table.

The process table was changed to a linked list so item could be added and removed
more easily. 


]

-------------------------------------------------------------------------------
